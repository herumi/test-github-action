name: Native ARM64 Windows Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-native-arm64-windows:
    runs-on: windows-11-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Display system information
      run: |
        echo "=== System Information ==="
        systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
        echo "Processor: %PROCESSOR_ARCHITECTURE%"
        echo "Processor Identifier: %PROCESSOR_IDENTIFIER%"
        wmic cpu get name
      shell: cmd

    - name: Execute bls12_test.exe
      run: |
        echo "=== bls12_test.exe ==="
        .\pairing.exe

    - name: Setup development environment
      run: |
        echo "=== Available Compilers ==="
        where cl 2>nul && cl 2>&1 | findstr "Version" || echo "cl.exe not found"
        where clang++ 2>nul && clang++ --version || echo "clang++ not found"
        where g++ 2>nul && g++ --version || echo "g++ not found"
      shell: cmd

    - name: Cache Visual Studio Build Tools
      uses: actions/cache@v4
      with:
        path: |
          C:\Program Files (x86)\Microsoft Visual Studio
          C:\ProgramData\chocolatey\lib\visualstudio2022buildtools
          C:\ProgramData\chocolatey\lib\visualstudio2022-workload-vctools
        key: ${{ runner.os }}-vs2022-buildtools-arm64-${{ hashFiles('**/hello.cpp') }}
        restore-keys: |
          ${{ runner.os }}-vs2022-buildtools-arm64-

    - name: Install Visual Studio Build Tools for ARM64
      run: |
        Write-Host "=== Installing Visual Studio Build Tools for ARM64 ==="
        
        $vsPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools"
        if (Test-Path "$vsPath\VC\Auxiliary\Build\vcvars64.bat") {
          Write-Host "Visual Studio Build Tools found in cache, skipping installation"
        } else {
          Write-Host "Installing Visual Studio 2022 Build Tools..."
          choco install visualstudio2022buildtools -y
          
          Write-Host "Installing ARM64 C++ build tools..."
          choco install visualstudio2022-workload-vctools -y
          
          Start-Sleep -Seconds 30
        }
        
        $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
        if (Test-Path $vcvarsPath) {
          Write-Host "Setting up VC environment variables..."
          cmd /c "`"$vcvarsPath`" && set" | ForEach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
              $name = $matches[1]
              $value = $matches[2]
              [Environment]::SetEnvironmentVariable($name, $value, "Process")
            }
          }
        }
      shell: powershell

    - name: Cache Clang/LLVM
      uses: actions/cache@v4
      with:
        path: |
          C:\Program Files\LLVM
          C:\ProgramData\chocolatey\lib\llvm
        key: ${{ runner.os }}-llvm-clang-${{ hashFiles('**/hello.cpp') }}
        restore-keys: |
          ${{ runner.os }}-llvm-clang-

    - name: Install Clang/LLVM (if needed)
      run: |
        if (Test-Path "C:\Program Files\LLVM\bin\clang++.exe") {
          Write-Host "Clang++ found in cache"
        } else {
          Write-Host "Installing LLVM/Clang..."
          choco install llvm -y
        }
        
        $env:PATH = "C:\Program Files\LLVM\bin;$env:PATH"
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Display source code
      run: |
        echo "=== Generated C++ Source Code ==="
        type hello.cpp
      shell: cmd

    - name: Show preprocessor output
      run: |
        echo "=== Preprocessor Output ==="
        if (Get-Command clang++ -ErrorAction SilentlyContinue) {
          Write-Host "Clang++ preprocessor output:"
          clang++ -E -dM hello.cpp | findstr -i "arm\|aarch\|win\|msc"
        }
        if (Get-Command cl -ErrorAction SilentlyContinue) {
          Write-Host "MSVC preprocessor output:"
          cl /E /P hello.cpp | findstr -i "arm\|aarch\|win\|msc"
        }
      shell: powershell
      continue-on-error: true

    - name: Compile with Visual Studio (if available)
      run: |
        Write-Host "=== Compiling with MSVC for ARM64 ==="
        
        $vcvarsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
        if (Test-Path $vcvarsPath) {
          Write-Host "Setting up ARM64 VC environment..."
          cmd /c "`"$vcvarsPath`" && cl /EHsc /std:c++17 /O2 /MACHINE:ARM64 hello.cpp /Fe:hello_msvc.exe"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "MSVC ARM64 compilation successful"
          } else {
            Write-Host "MSVC ARM64 compilation failed"
          }
        } else {
          Write-Host "ARM64 VC environment not found"
        }
      shell: powershell
      continue-on-error: true

    - name: Compile with Clang++ (if available)
      run: |
        if (Get-Command clang++ -ErrorAction SilentlyContinue) {
          Write-Host "=== Compiling with Clang++ for ARM64 ==="
          clang++ -std=c++17 -O2 -target aarch64-pc-windows-msvc -o hello_clang.exe hello.cpp
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Clang++ ARM64 compilation successful"
          } else {
            Write-Host "Clang++ ARM64 compilation failed"
          }
        } else {
          Write-Host "Clang++ not available"
        }
      shell: powershell
      continue-on-error: true

    - name: Check cache status
      run: |
        Write-Host "=== Cache Status ==="
        Write-Host "Visual Studio Build Tools:"
        if (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat") {
          Write-Host "  ✅ Found in cache"
        } else {
          Write-Host "  ❌ Not found"
        }
        
        Write-Host "Clang++:"
        if (Test-Path "C:\Program Files\LLVM\bin\clang++.exe") {
          Write-Host "  ✅ Found in cache"
        } else {
          Write-Host "  ❌ Not found"
        }
      shell: powershell

    - name: Execute compiled binaries
      run: |
        echo "=== Execution Results ==="

        if (Test-Path "hello_msvc.exe") {
          Write-Host "--- MSVC Binary Output ---"
          .\hello_msvc.exe
          Write-Host ""
        }

        if (Test-Path "hello_clang.exe") {
          Write-Host "--- Clang Binary Output ---"
          .\hello_clang.exe
          Write-Host ""
        }
      shell: powershell


