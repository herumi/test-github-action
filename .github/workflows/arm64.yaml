name: Native ARM64 Windows Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-native-arm64-windows:
    runs-on: windows-11-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Display system information
      run: |
        echo "=== System Information ==="
        systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
        echo "Processor: %PROCESSOR_ARCHITECTURE%"
        echo "Processor Identifier: %PROCESSOR_IDENTIFIER%"
        wmic cpu get name
      shell: cmd

    - name: Setup development environment
      run: |
        echo "=== Available Compilers ==="
        where cl 2>nul && cl 2>&1 | findstr "Version" || echo "cl.exe not found"
        where clang++ 2>nul && clang++ --version || echo "clang++ not found"
        where g++ 2>nul && g++ --version || echo "g++ not found"
      shell: cmd

    - name: Install Clang/LLVM (if needed)
      run: |
        if (!(Get-Command clang++ -ErrorAction SilentlyContinue)) {
          Write-Host "Installing LLVM/Clang..."
          choco install llvm -y
          $env:PATH = "C:\Program Files\LLVM\bin;$env:PATH"
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        } else {
          Write-Host "Clang++ already available"
        }
      shell: powershell

    - name: Display source code
      run: |
        echo "=== Generated C++ Source Code ==="
        type hello.cpp
      shell: cmd

    - name: Compile with Visual Studio (if available)
      run: |
        if (Get-Command cl -ErrorAction SilentlyContinue) {
          Write-Host "=== Compiling with MSVC ==="
          cl /EHsc /std:c++17 /O2 hello.cpp /Fe:hello_msvc.exe
          if ($LASTEXITCODE -eq 0) {
            Write-Host "MSVC compilation successful"
          }
        } else {
          Write-Host "MSVC not available"
        }
      shell: powershell
      continue-on-error: true

    - name: Compile with Clang++ (if available)
      run: |
        if (Get-Command clang++ -ErrorAction SilentlyContinue) {
          Write-Host "=== Compiling with Clang++ ==="
          clang++ -std=c++17 -O2 -o hello_clang.exe hello.cpp
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Clang++ compilation successful"
          }
        } else {
          Write-Host "Clang++ not available"
        }
      shell: powershell
      continue-on-error: true

    - name: Execute compiled binaries
      run: |
        echo "=== Execution Results ==="

        if (Test-Path "hello_msvc.exe") {
          Write-Host "--- MSVC Binary Output ---"
          .\hello_msvc.exe
          Write-Host ""
        }

        if (Test-Path "hello_clang.exe") {
          Write-Host "--- Clang Binary Output ---"
          .\hello_clang.exe
          Write-Host ""
        }
      shell: powershell

    - name: Verify binary architecture
      run: |
        echo "=== Binary Architecture Verification ==="

        if (Test-Path "hello_msvc.exe") {
          Write-Host "MSVC Binary:"
          dumpbin /headers hello_msvc.exe | findstr "machine"
        }

        if (Test-Path "hello_clang.exe") {
          Write-Host "Clang Binary:"
          dumpbin /headers hello_clang.exe | findstr "machine"
        }
      shell: powershell

